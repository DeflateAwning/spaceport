# Spaceport secrets file, don't commit to version control!

# /admin/ route obfuscation
# Set this to random characters
# For example, use the output of this:
# head /dev/urandom | base32 | head -c 16
ADMIN_RANDOM = ''

# /ipn/ route obfuscation
# Set this to random characters
# For example, use the output of this:
# head /dev/urandom | base32 | head -c 16
IPN_RANDOM = ''

# Registration bypass code
# Allows people to register outside of protospace
# Set this to random characters
# For example, use the output of this:
# head /dev/urandom | base32 | head -c 16
REGISTRATION_BYPASS = ''

# Django secret key
# Set this to random characters
# For example, use the output of this:
# head /dev/urandom | base64 | head -c 50
DJANGO_SECRET_KEY = ''
# Warning
# Keep this value secret.
# Running Django with a known SECRET_KEY defeats many of Djangoâ€™s security
# protections, and can lead to privilege escalation and remote code execution
# vulnerabilities.

# LDAP API url
# should contain the IP and port of the script and machine connected over VPN
# with trailing slash
LDAP_API_URL = ''

# LDAP API key
# should be equal to the auth token value set in
# spaceport/ldapserver/secrets.py
LDAP_API_KEY = ''

# Door cards API token
# Set this to random characters
# For example, use the output of this:
# head /dev/urandom | base32 | head -c 40
DOOR_API_TOKEN = ''

# Protospace general info
DOOR_CODE = ''
WIFI_PASS = ''
MINECRAFT = ''

# Backup API tokens
# These tokens allow each user to download a backup of member data.
# Don't mess up the data structure!
# Tokens must be random and unique, use the output of:
# head /dev/urandom | base32 | head -c 40
BACKUP_TOKENS = {
    '<token>': {
        'name': 'firstname_lastname',
        'backup_id': '<token>',
        'cache_key': '<token>',
    },
    '<token>': {
        'name': 'firstname_lastname',
        'backup_id': '<token>',
        'cache_key': '<token>',
    },
}
